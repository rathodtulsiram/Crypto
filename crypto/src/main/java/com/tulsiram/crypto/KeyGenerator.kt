/*
 * Copyright (c) 2019, Tulsiram Rathod.
 */

package com.tulsiram.crypto

import android.security.keystore.KeyGenParameterSpec
import java.security.KeyStore
import javax.crypto.KeyGenerator

/**
 * @author Tulsiram
 * @since 23/07/2019
 */
object KeyGenerator {

    private const val ANDROID_KEY_STORE = "AndroidKeyStore"

    /**
     * @return secrete key generated by key generator
     *
     * @see [KeyGenerator]
     * @param algorithmSpec details of algorithm
     */
    private fun generateSecretKey(algorithmSpec: AlgorithmSpec) {
        KeyGenerator.getInstance(algorithmSpec.algorithm.name, ANDROID_KEY_STORE).apply {
            init(
                KeyGenParameterSpec.Builder(algorithmSpec.alias, algorithmSpec.algorithm.purpose)
                    .setBlockModes(algorithmSpec.algorithm.mode)
                    .setEncryptionPaddings(algorithmSpec.algorithm.padding)
                    .setRandomizedEncryptionRequired(false)
                    .build()
            )
        }.generateKey()
    }

    /**
     * @return secrete key stored or generate new secret key
     *
     * @see [java.security.Key]
     * @param algorithmSpec details of algorithm
     */
    @Throws(Exception::class)
    fun getSecretKey(algorithmSpec: AlgorithmSpec): java.security.Key {
        val keyStore = KeyStore.getInstance(ANDROID_KEY_STORE)
        keyStore.load(null)
        if (!keyStore.containsAlias(algorithmSpec.alias)) {
            generateSecretKey(algorithmSpec)
        }
        return keyStore.getKey(algorithmSpec.alias, null)
    }
}